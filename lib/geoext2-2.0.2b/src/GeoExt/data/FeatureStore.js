Ext.define("GeoExt.data.FeatureStore",{extend:"Ext.data.Store",requires:["GeoExt.data.reader.Feature"],statics:{LAYER_TO_STORE:1,STORE_TO_LAYER:2},isLayerBinded:!1,layer:null,featureFilter:null,constructor:function(n){n=Ext.apply({proxy:{type:"memory",reader:{type:"feature",idProperty:"id"}}},n);n.layer&&(this.layer=n.layer,delete n.layer);n.features&&(n.data=n.features);delete n.features;this.callParent([n]);var t={initDir:n.initDir};delete n.initDir;this.layer&&this.bind(this.layer,t)},destroy:function(){this.unbind();this.callParent()},bind:function(n,t){var i,r;if(t=t||{},!this.isLayerBinded){this.layer=n;this.isLayerBinded=!0;i=t.initDir;t.initDir==undefined&&(i=GeoExt.data.FeatureStore.LAYER_TO_STORE|GeoExt.data.FeatureStore.STORE_TO_LAYER);r=n.features.slice(0);i&GeoExt.data.FeatureStore.STORE_TO_LAYER&&this.each(function(t){n.addFeatures([t.raw])},this);i&GeoExt.data.FeatureStore.LAYER_TO_STORE&&n.features.length>0&&this.loadRawData(r,!0);this.layer.events.on({featuresadded:this.onFeaturesAdded,featuresremoved:this.onFeaturesRemoved,featuremodified:this.onFeatureModified,scope:this});this.on({load:this.onLoad,clear:this.onClear,add:this.onAdd,remove:this.onRemove,update:this.onStoreUpdate,scope:this});this.fireEvent("bind",this,this.layer)}},unbind:function(){this.isLayerBinded&&(this.layer.events.un({featuresadded:this.onFeaturesAdded,featuresremoved:this.onFeaturesRemoved,featuremodified:this.onFeatureModified,scope:this}),this.un({load:this.onLoad,clear:this.onClear,add:this.onAdd,remove:this.onRemove,update:this.onStoreUpdate,scope:this}),this.layer=null,this.isLayerBinded=!1)},addFeatures:function(n){return this.loadRawData(n,!0)},removeFeatures:function(n){n=Ext.isArray(n)?n.slice(0):Array.prototype.slice.apply(arguments);Ext.Array.each(n,function(n){this.remove(this.getByFeature(n))},this)},getByFeature:function(n){return this.getAt(this.findBy(function(t){return t.raw==n}))},getById:function(n){return(this.snapshot||this.data).findBy(function(t){return t.raw.id===n})},addFeaturesToLayer:function(n){for(var i=[],t=0,r=n.length;t<r;t++)i.push(n[t].raw);this._adding=!0;this.layer.addFeatures(i);delete this._adding},onFeaturesAdded:function(n){var i,t,r,f,u;if(!this._adding){if(i=n.features,t=i,this.featureFilter)for(t=[],r=0,f=i.length;r<f;r++)u=i[r],this.featureFilter.evaluate(u)!==!1&&t.push(u);t=this.proxy.reader.read(t).records;this._adding=!0;this.add(t);delete this._adding}},onFeaturesRemoved:function(n){var i,t,r;if(!this._removing)for(i=n.features,t=i.length-1;t>=0;t--)r=this.getByFeature(i[t]),r&&(this._removing=!0,this.remove(r),delete this._removing)},onFeatureModified:function(n){var t=this.getByFeature(n.feature),i;t&&(i=this.proxy.reader.read(n.feature).records[0],Ext.Object.each(i.getData(),function(n,i){t.set(n,i)},this))},onLoad:function(n,t,i){i&&(this._removing=!0,this.layer.removeAllFeatures(),delete this._removing,this.addFeaturesToLayer(t))},onClear:function(){this._removing=!0;this.layer.removeFeatures(this.layer.features);delete this._removing},onAdd:function(n,t){this._adding||this.addFeaturesToLayer(t)},onRemove:function(n,t){if(!this._removing){var i=t.raw;this.layer.getFeatureById(i.id)!=null&&(this._removing=!0,this.layer.removeFeatures([i]),delete this._removing)}},onStoreUpdate:function(n,t,i,r){var u,f;this._updating||(u=t.raw,u.state!==OpenLayers.State.INSERT&&(u.state=OpenLayers.State.UPDATE),f=this.layer.events.triggerEvent("beforefeaturemodified",{feature:u}),f!==!1&&(Ext.Array.each(r,function(n){u.attributes[n]=t.get(n)}),this._updating=!0,this.layer.events.triggerEvent("featuremodified",{feature:u}),delete this._updating))},loadRawData:function(n,t){var i=this,r=i.proxy.reader.read(n),u=r.records;r.success&&(i.totalCount=r.total,i.loadRecords(u,t?i.addRecordsOptions:undefined),i.fireEvent("load",i,u,!0))}})